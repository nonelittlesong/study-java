# 使用 # 注释一行

# 参考：
# - https://www.cnblogs.com/shamo89/p/8178109.html
# - https://www.jb51.net/article/162443.htm

# --------- 自定义属性 ---------

com.song.name="Song"
com.song.say="hello world"
# 绑定属性
# @RestController
# public class UserController {
#     @Value("${com.song.name}")
#     private String name;
#     @Value("${com.song.say}")
#     private String say;

#     @RequestMapping("/")
#     public String hexo(){
#         return name + "," + say;
#     }
# }

# 官方提倡，绑定一个 Java Bean
# ConfigBean.java
# @ConfigurationProperties(prefix = "com.song")
# public class ConfigBean {
#     private String name;
#     private String say;
#     // 省略getter和setter
# }
#
# SpringBoot 入口类
# @SpringBootApplication
# @EnableConfigurationProperties({ConfigBean.class})
# public class Chapter2Application {
#     public static void main(String[] args) {
#         SpringApplication.run(Chapter2Application.class, args);
#     }
# }
#
# Controller
# @RestController
# public class UserController {
#     @Autowired
#     ConfigBean configBean;
#
#     @RequestMapping("/")
#     public String hexo(){
#         return configBean.getName()+configBean.getWant();
#     }
# }

# 配置属性间引用
com.song.name="Song"
com.song.say="hello world"
com.song.stupidCunt=${com.song.name} says ${com.song.say} # 有点 shell 的味道，但 = 两边可以有空格

# --------- 自定义配置文件 ---------

# 例如，src/main/resources/test.properties
#
# 新建一个 Bean
# @Configuration
# @ConfigurationProperties(prefix = "com.md") 
# @PropertySource("classpath:test.properties")
# public class ConfigTestBean {
#     private String name;
#     private String want;
#     // 省略getter和setter
# }

# --------- ${random.xxx} ---------

song.secret=${random.value}   #
song.number=${random.int}
song.bignumber=${random.long}
song.uuid=${random.uuid}      #
song.number.less.than.ten=${random.int(10)}
song.number.in.range=${random.int[1024,65536]}

# --------- 通过命令行参数配置属性 ---------

# java -jar xx.jar --server.port=9090
# 相当于在 application.properties 中，
# server.port=9090

# 属性源：
#  1. 根目录下的开发工具全局属性(当开发工具激活时为 ~/.spring-boot-devtools.properties)。
#  2. 测试中的 @TestPropertySource 注解。
#  3. 测试中的 @SpringBootTest#properties 注解。
#  4. 命令行参数
#  5. SPRING_APPLICATION_JSON 中的属性(环境变量或系统属性中的内联 JSON 嵌入)。
#  6. ServletConfig 初始化参数。
#  7. ServletContext 初始化参数。
#  8. java:comp/env 里的 JNDI 属性
#  9. JVM 系统属性
# 10. 操作系统环境变量
# 11. 随机生成的带 random.* 前缀的属性（在设置其他属性时，可以应用他们，比如${random.long}）
# 12. 应用程序以外的application.properties 或者 appliaction.yml 文件
# 13. 打包在应用程序内的 application.properties 或者 appliaction.yml 文件
# 14. 通过 @PropertySource 标注的属性源
# 15. 默认属性(通过 SpringApplication.setDefaultProperties 指定)。

# application.properties 文件的优先级：
# 1. 当前项目根目录下的 config 目录下
# 2. 当前项目根目录下
# 3. resources 目录下的 config 目录下
# 4. resources 目录下

# --------- Profile 多环境配置 ---------

# 方法一
# application-dev.properties
# application-prod.properties
# 在 application.properties 中切换
spring.profiles.active=dev

# 方法二
# 通过 @Profile 注解配置
#
# 定义接口
# public  interface DBConnector { public  void  configure(); }
#
# /**
#  * 测试数据库
#  */
# @Component
# @Profile("testdb")
# public class TestDBConnector implements DBConnector {
#     @Override
#     public void configure() {
#         System.out.println("testdb");
#     }
# }
# /**
#  * 生产数据库
#  */
# @Component
# @Profile("devdb")
# public class DevDBConnector implements DBConnector {
#     @Override
#     public void configure() {
#         System.out.println("devdb");
#     }
# }

spring.profiles.active=testdb

# @RestController
# @RequestMapping("/task")
# public class TaskController {
#
#     @Autowired
#     DBConnector connector ;
#
#     @RequestMapping(value = {"/",""})
#     public String hellTask(){
#         connector.configure(); //最终打印testdb     
#         return "hello task !! myage is " + myage;
#     }
# }

# 使用 include 包含 profile
spring.profiles.include=proddb,prodmq